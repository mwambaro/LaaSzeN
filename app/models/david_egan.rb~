#!/home/mwambaro/.rvm/rubies/ruby-2.2.0/bin/ruby

# Implementing the site layout of David Egan at http:://davidegan.me

class DavidEgan
    def initialize
        @data_model = LaaszenModel::DataModel.new(::Rails.root)
    end
    
    def dav_gen_hash_header(title, navs, intro, logos, banner_img)
        hash = {
           main_title: title,                 
           nav_items_in_tag: navs,
           intro_text_in_tag: intro,   
           logo_names: logos,
           banner_image_in_tag: banner_img
        }
    end
    
    def dav_gen_hash_content(left_column, right_column)
        hash = {
            first_column_objects_in_tag: left_column,
            second_column_objects_in_tag: right_column
        }
    end
    
    def dav_gen_hash_footer(footers)
        hash = {
            footers_in_tag: footers
        }
    end
    
    def get_view_path(params)
        return nil if params.nil?
        view_path = File.join(
            Rails.root, 'app', 'views', 
            params[:controller], 
            "#{params[:action]}.html.erb"
        )
    end
    
    def make_dav_layout_compatible(src_file)
        @data_model.error_message("DavCompatible #{src_file} ...")
        
        return nil unless File.exists?(src_file)
            
        fname = File.basename(src_file)
        dname = File.dirname(src_file)
        pname = "davstd_#{fname}"
        
        partial_name = nil
        partial = pname.split('.')
        partial.each do |p|
            partial_name ||= ""
            partial_name += "#{p}." unless p =~ /\Ahtml|erb\z/i
        end
        
        return nil if partial_name.nil?
        partial_name = partial_name.slice(0...partial_name.length-1)
        
        
        matcher = Regexp.compile(
            "<!--\s*David\s*Egan\s*Layout\s*Compatible\s*-->", 'i'
        )
        
        code = nil    
        File.open(src_file, "rb") do |f|
            code = f.read.to_s                
        end
        
        return nil if code.nil?
        
        if code.match(matcher)
            @data_model.error_message("Already David Egan Compatible.")
            return 0
        end
        
        # backup before overwriting it
        DryFileManagement::BackupFile.new(src_file).backup
        
        code = "\r\n\r\n<!-- David Egan Layout Compatible -->" +
               "\r\n\r\n#{code}"
        hash_cc = dav_gen_hash_content([code], nil)
        ret = gen_dav_egan(
           hash_cc, src_file, 
           {bl_header: false, bl_content: true, bl_footer: false}                  
        )
        return nil if ret.nil?
        
        @data_model.error_message("DavCompatible #{src_file} ==> [DONE]")
        
        return 0       
    end

    def prefix(n, k=nil)
        m = n < 0 ? -n : n
        p = k.nil? ? 1 : k
        p = p < 0 ? -p : p
        pref = m > 0 ? "\r\n"*p + " "*m : "\r\n"
    end

    #hash = {
    #    main_title:
    #    nav_items_in_tag:
    #    intro_text_in_tag:
    #    logo_names:
    #    banner_image_in_tag:
    #    first_column_objects_in_tag: 
    #    second_column_objects_in_tag:
    #    footers_in_tag:
    #}

    # bl_hash = {
    #     bl_header:
    #     bl_content:
    #     bl_footer:
    # }

    def init_hash(h=nil)
        hash = {
            main_title: nil, 
            nav_items_in_tag: nil, 
            intro_text_in_tag: nil,
            logo_names: nil,
            banner_image_in_tag: nil, 
            first_column_objects_in_tag: nil,
            second_column_objects_in_tag: nil,
            footers_in_tag: nil
        }
        
        unless h.nil?
            hash.merge!(h)
        end
        
        return hash
    end

    def init_bl_hash(hash=nil)
        bl_hash = {
            bl_header: true,
            bl_content: true,
            bl_footer: true
        }
        
        unless hash.nil?
            bl_hash.merge!(hash)
        end
        
        return bl_hash    
    end

    def gen_dav_egan(hash, file=nil, bl_hash=nil)
        hash = init_hash(hash)
        bl_hash = init_bl_hash(bl_hash)
    
        code, hash_of_classes = nil, nil
    
        begin   
            @data_model.error_message('Assigning values ...')

            main_title             = hash[:main_title] || ""
            nav_items              = hash[:nav_items_in_tag] || []
            intro_text             = hash[:intro_text_in_tag] || ""
            logo_names             = hash[:logo_names] || []
            banner_image           = hash[:banner_image_in_tag] || ""
            first_column_objects   = hash[:first_column_objects_in_tag] || []
            second_column_objects  = hash[:second_column_objects_in_tag] || []
            footers                = hash[:footers_in_tag] || []
    
            @data_model.error_message('Starting ...')
    
            # prefix(4) + '<body class="wide template-single">' 
    
            code = ""
            if bl_hash[:bl_header]
                code += prefix(16) + "\r\n<!-- HEADER -->\r\n" +
                        prefix(16) + '<div id="header" class="padding_bottom">' +
		                prefix(20) + '<div class="columns_211 page_wrapper">' +
		                prefix(24) + '<div class="half left">' +
		                prefix(28) + '<div id="site_title">' + main_title + 
		                prefix(28) + '</div>' + 
		                prefix(24) + '</div>' +  
		                prefix(24) + '<div class="half right">' +
		                prefix(28) + '<div id="nav_wrap" class="menu_wrapper">' +
		                prefix(32) + '<ul id="menu-main-menu" class="menu">'
		   
                @data_model.error_message('Nav Items ...')
    
                count = 11
                menu_items_counts = nil
                navs = ""
                nav_items.each do |link_expression| # e.g <%= link_to 'Home', '#' %>
                    menu_items_counts ||= []
                    menu_items_counts << ['menu-item-', count.to_s]
                    navs += prefix(36) + "<li id=\"menu-item-#{count}\" class=\""+
                                         "menu-item menu-item-type-post_type menu"+
                                         "-item-object-page menu-item-#{count}\">"+
                            prefix(40) + "#{link_expression}" +
                            prefix(36) + '</li>'
                            count += 1
                end
    
                unless menu_items_counts.nil?
                    hash_of_classes ||= Hash.new
                    hash_of_classes[:menu_items] = menu_items_counts
                end
    
                @data_model.error_message('Introduction text ...')
    
                code += navs +
                        prefix(32) + '</ul>' +
                        prefix(28) + '</div>' +
                        prefix(24) + '</div>' +
                        prefix(20) + '</div>' +
                        prefix(16) + "\r\n<!-- INTRODUCTION_TEXT -->\r\n" +
                        prefix(16) + '<div id="intro" class="columns_211'+
                                     ' page_wrapper">' +
                        prefix(20) + '<div class="half left">' +
                        prefix(24) + '<div class="text_box">' +
                        prefix(28) + intro_text +
                        prefix(24) + '</div>' +
                        prefix(20) + '</div>' +
                        prefix(20) + "\r\n<!-- LOGO_AREA -->\r\n" +
                        prefix(20) + '<div class="half right">' +
                        prefix(24) + '<div class="menu_wrapper">' +
                        prefix(28) + '<ul id="menu-social-menu" class="menu">'
           
                @data_model.error_message('Handling Logos ...')
    
                logo_item_counts = nil
                count = 330   
                logos = ""    
                logo_names.each do |logo_link_expression|
                    logo_item_counts ||= []
                    logo_item_counts << ['menu-item-', count.to_s]
                    logos += prefix(32) + "<li id=\"menu-item-#{count}\""+
                                          " class=\"menu-item" +
                                          " menu-item-type-custom menu-item"+
                                          "-object-custom " +
                                          "menu-item-#{count}\">" +
                             prefix(36) + "#{logo_link_expression}" +
                             prefix(32) + '</li>'
                    count += 1
                end
    
                unless logo_item_counts.nil?
                    hash_of_classes ||= Hash.new
                    hash_of_classes[:logo_items] = logo_item_counts
                end
    
                @data_model.error_message('Getting banner image ...')
       
                code += logos +
                        prefix(28) + '</ul>' +
                        prefix(24) + '</div>' +
                        prefix(20) + '</div>' +
                        prefix(16) + '</div>' +
                        prefix(12) + '</div>' +
                        prefix(12) + "\r\n<!-- BANNER_IMAGE -->\r\n" +
                        prefix(12) + '<div class="text_box">' +
                        prefix(16) + banner_image +
                        prefix(12) + '</div>' 
            end
    
            if bl_hash[:bl_content]
                code += prefix(12) + "\r\n<!-- CONTENT -->\r\n" +
                prefix(12) + '<div id="content" class="page_wrapper page_background">' +
                prefix(16) + '<div id="blog_content" class="columns_431">' +
                prefix(20) + '<div class="three_quarters bottom_padding">'
            
                @data_model.error_message('Grabbing main data ...')
    
                main_data_objects = nil
                count = 273       
                objects = ""    
                first_column_objects.each do |main_data_tag|
                    main_data_objects ||= []
                    main_data_objects << ['post-', count.to_s]
                    objects +=  prefix(24) + "<div id=\"post-#{count}\" class=\""+
                                             "post_box top\">" +
                                prefix(28) + main_data_tag +
                                prefix(24) + '</div>' 
                end
    
                unless main_data_objects.nil?
                    hash_of_classes ||= Hash.new
                    hash_of_classes[:main_items] = main_data_objects
                end
    
                @data_model.error_message('Grabbing side bar data ...')
           
                code += objects +
                        prefix(20) + '</div>' +
                        prefix(20) + "\r\n<!-- QUATER SIDE BAR -->\r\n" +
                        prefix(20) + '<div class="quarter sidebar">'
          
                objects = ""        
                second_column_objects.each do |side_bar_data|
                    objects += prefix(24) + side_bar_data
                end
           
                code += objects + prefix(20) + '</div>' +
                        prefix(16) + '</div>' +
                        prefix(12) + '</div>' 
            end
    
            if bl_hash[:bl_footer]
                code += prefix(12) + "\r\n<!-- FOOTER -->\r\n" +
                        prefix(16) + '<div id="footer">'
            
                @data_model.error_message('Footer data ...')
            
                objects = ""
                footers.each do |footer|
                    objects += prefix(20) + footer
                end
    
                code += objects + prefix(16) + '</div>' +
                        prefix(8) + "\r\n<!-- END WRAPPER -->\r\n"
            end    
            
            @data_model.error_message('Attempting tp write to file ...')
                   
            unless file.nil?
                File.open(file, "wb"){|f| f.write(code)}
            end
    
            @data_model.error_message('[DONE].')
    
        rescue => err
            @data_model.handle_error(
                "#{self.class.to_s}::gen_dav_egan", err
            )
        end
    
        return code, hash_of_classes           
    end
end
