
/* _start_ comments **
    GRAPH: db_table_names
               |
               | current_db_table_name
               |
           rows_ids 
               |
               | current_row_id
               |
           columns 
               |
               | current_column
               |
           phrases 
               |
               | current_phrase
               |
           loopback
           
    vertex_array = [db_table_names,rows_ids,columns,phrases]
    edge_array = [current_db_table_name,current_row_id,current_column]
              
    metadata = {
        vertex_array: array of vertices.
        edge_array: array of edges that originates from the vertices respectively.
    }
        
    functor: reference to routine that receives data to translate as input.
             It should return 'payload' defined as follows:
             payload = {
                 to_translate: original data.
                 translated: translated data.
             }
    
/* _end_ comments */

algorithm translate(from_language, into_language, functor)
    metadata = load_metadata(into_language)
    ret_value = manage_graph_state(into_language, metadata, functor)
return ret_value


algoritm load_metadata(into_language)
    meta = NULL
    ret  = NULL
    ret = /* 
              Get the row that corresponds to 'into_language' in MetaInfo 
              database table. MetaInfo is a db table defined by the following
              attributes (columns):
                  * language: language into which site is being translated. Case
                              insensitive uniqueness validation should be applied here.
                  * metadata: a serialized hash that is defined by two keys:
                              'vertex_array' and 'edge_array'.
          */
    if ret == NULL
        meta = init_graph
    else
        metadata = ret.metadata
        meta = {
            vertex_array: deserialize_object(metadata[vertex_array])
            edge_array: deserialize_object(metadata[edge_array])
        }
        
return meta


algorithm init_graph
    vertex_array = [[],[],[],[]]
    edge_array = [NULL,NULL,NULL]
    
    metadata = {
        vertex_array: vertex_array,
        edge_array: edge_array
    }
     
    db_table_names = get_db_table_names(directory)
    if db_table_names == NULL || db_table_names == []
        return metadata
    current_db_table_name = db_table_names.pop
    metadata.vertex_array[0] = db_table_names
    metadata.edge_array[0] = current_db_table_name
    
    rows_ids = get_rows_ids(current_db_table_name)
    if rows_ids == NULL || rows_ids == []
        return metadata    
    current_row_id = rows_ids.pop
    metadata.vertex_array[1] = rows_ids
    metadata.edge_array[1] = current_row_id
    
    columns = get_columns(current_db_table_name, current_row_id)
    if columns == NULL || columns == []
        return metadata
    current_column = columns.pop
    metadata.vertex_array[2] = columns
    metadata.edge_array[2] = current_column
    
    phrases = get_phrases(current_db_table_name, current_row_id, current_column)
    if phrases == NULL || phrases == []
        return metadata
    metadata.vertex_array[3] = phrases
          
return metadata


algorithm manage_graph_state(into_language, metadata, functor)
    vertex_array = metadata.vertex_array
    edge_array = metadata.edge_array
    
    max_phrases = MAX_PHRASES
    ret_value = NULL
    
    if vertex_array[0].nil? || vertex_array[0].empty?
        return 0
    while !vertex_array[0].empty?
        edge_array[0] = vertex_array[0].pop
        vertex_array[1] = get_rows_ids(edge_array[0])
        if vertex_array[1].nil? || vertex_array[1].empty?
            continue
        while !vertex_array[1].empty?
            edge_array[1] = vertex_array[1].pop
            vertex_array[2] = get_columns(edge_array[0], edge_array[1])
            if vertex_array[2].nil? || vertex_array[2].empty?
                continue
            while !vertex_array[2].empty?
                edge_array[2] = vertex_array[2].pop
                vertex_array[3] = get_phrases(edge_array[0], edge_array[1], edge_array[2])
                if vertex_array[3].nil? || vertex_array[3].empty?
                    continue
                    
                if functor != NULL
                    current_phrase = vertex_array[3].pop(max_phrases)
                    payload = functor(current_phrase)
        
                    metadata = {
                        vertex_array: vertex_array
                        edge_array: edge_array
                    } 
                    ret_value = store_translation_session(
                        into_language, metadata, payload
                    )
                    metadata = store_metadata(into_language, metadata)
    
return ret_value


algorithm store_translation_session(into_language, metadata, payload)
    vertex_array = metadata.vertex_array
    edge_array = metadata.edge_array
    
    current_db_table_name = edge_array[0]
    current_row_id = edge_array[1]
    current_column = edge_array[2]
    
    ret  = NULL
    ret = /* 
              Get the row that corresponds to 'into_language' and 
              'current_db_table_name' in database table. TranslationSession is 
              a persisted db table defined by the following attributes (columns):
                  * language: language into which site is being translated. Case
                              insensitive uniqueness validation should be applied here.
                  * name: db table name. 
                  * state: integer. 1 if db table is fully translated, 0 otherwise.
                  * object: serialized db table object. Case insensitive uniqueness 
                            validation should be applied here.
          */
    if ret == NULL
        db = init_translation_session(into_language, metadata)
        data = {
            language: into_language,
            name: current_db_table_name
        }
        ret = TranslationSession.find_by(data)
        
    tr_db_table_as_array = ret.object
    n_row = tr_db_table_as_array.length
    
    for i=0 to n_row-1
        row = deserialize_object(tr_db_table_as_array[i])
        arr ||= [] /* init array */
        arr = payload
        row[current_column].push(serialize_object(payload))
        tr_db_table_as_array[i] = serialize_object(row)
    ret.object = tr_db_table_as_array
    ret_value = TranslationSession.update_attributes(ret.attributes)

return ret_value


algorithm init_translation_session(into_language, metadata)
    vertex_array = metadata.vertex_array
    edge_array = metadata.edge_array
    
    current_db_table_name = edge_array[0]
    rows_ids = vertex_array[1]
    attrs = vertex_array[2]
    attribs = {} /* init hash */
    
    /*
        Each column is serialized as an array of 'payload' hashes.
        Note that 'payload' should be serialized as Hash during assignment
        in the array.
    */
    n_col = attrs.length
    for i=0 to n_col-1
        col = attrs[i]
        attribs[col] = attribute_type(current_db_table_name, col):serialize:payload [] 
        
    db_table = create_dynamic_tr_db_table(current_db_table_name, attribs)
    
    for i=0 to n_col-1
        col = attrs[i]
        attribs[col] = []
        
    n_row = rows_ids.length
    for i=0 to n_row-1
        db = db_table.new(attribs) 
        db.id = rows_ids[i]
        db.save
    
    /*
        Create an array that replicates the entries in db table.
        Serialize the row as an object and push it onto the array.
    */    
    db_table_as_array = [] /* init array */
    db_table.each{|row| db_table_as_array.push(serialize_object(row))}
    
    data = {
        language: into_language,
        name: current_db_table_name,
        state: 0,
        object: db_table_as_array
    }
    
    db = TranslationSession.create(data)
return db


algorithm store_metadata(into_language, metadata)
    meta = {
        vertex_array: serialize_object(metadata[vertex_array])
        edge_array: serialize_object(metadata[edge_array])
    }
     
    hash = {
        language: into_language,
        metadata: meta
    }
    re = MetaInfo.find_by({language: into_language})
    if re.nil?
        MetaInfo.create(hash)       
    else
        re.update_attributes(hash)
return metadata
